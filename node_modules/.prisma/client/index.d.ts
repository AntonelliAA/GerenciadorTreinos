
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Usuarios
 * 
 */
export type Usuarios = {
  id_usuario: number
  nome: string
  email: string
  idade: number
  altura: Prisma.Decimal
  peso: Prisma.Decimal
  senha: string
}

/**
 * Model Treinos
 * 
 */
export type Treinos = {
  id_treino: number
  nome: string
  id_usuario: number
}

/**
 * Model Exercicio
 * 
 */
export type Exercicio = {
  id_exercicio: number
  series: number
  repeticoes: number
  carga: Prisma.Decimal
  nome: string
  id_usuario: number
  id_treino: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuarios.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuarios.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.usuarios`: Exposes CRUD operations for the **Usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.UsuariosDelegate<GlobalReject>;

  /**
   * `prisma.treinos`: Exposes CRUD operations for the **Treinos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Treinos
    * const treinos = await prisma.treinos.findMany()
    * ```
    */
  get treinos(): Prisma.TreinosDelegate<GlobalReject>;

  /**
   * `prisma.exercicio`: Exposes CRUD operations for the **Exercicio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercicios
    * const exercicios = await prisma.exercicio.findMany()
    * ```
    */
  get exercicio(): Prisma.ExercicioDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuarios: 'Usuarios',
    Treinos: 'Treinos',
    Exercicio: 'Exercicio'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuariosCountOutputType
   */


  export type UsuariosCountOutputType = {
    treinos: number
    exercicio: number
  }

  export type UsuariosCountOutputTypeSelect = {
    treinos?: boolean
    exercicio?: boolean
  }

  export type UsuariosCountOutputTypeGetPayload<S extends boolean | null | undefined | UsuariosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsuariosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsuariosCountOutputTypeArgs)
    ? UsuariosCountOutputType 
    : S extends { select: any } & (UsuariosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsuariosCountOutputType ? UsuariosCountOutputType[P] : never
  } 
      : UsuariosCountOutputType




  // Custom InputTypes

  /**
   * UsuariosCountOutputType without action
   */
  export type UsuariosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuariosCountOutputType
     */
    select?: UsuariosCountOutputTypeSelect | null
  }



  /**
   * Count Type TreinosCountOutputType
   */


  export type TreinosCountOutputType = {
    exercicio: number
  }

  export type TreinosCountOutputTypeSelect = {
    exercicio?: boolean
  }

  export type TreinosCountOutputTypeGetPayload<S extends boolean | null | undefined | TreinosCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TreinosCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TreinosCountOutputTypeArgs)
    ? TreinosCountOutputType 
    : S extends { select: any } & (TreinosCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TreinosCountOutputType ? TreinosCountOutputType[P] : never
  } 
      : TreinosCountOutputType




  // Custom InputTypes

  /**
   * TreinosCountOutputType without action
   */
  export type TreinosCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TreinosCountOutputType
     */
    select?: TreinosCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Usuarios
   */


  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id_usuario: number | null
    idade: number | null
    altura: Decimal | null
    peso: Decimal | null
  }

  export type UsuariosSumAggregateOutputType = {
    id_usuario: number | null
    idade: number | null
    altura: Decimal | null
    peso: Decimal | null
  }

  export type UsuariosMinAggregateOutputType = {
    id_usuario: number | null
    nome: string | null
    email: string | null
    idade: number | null
    altura: Decimal | null
    peso: Decimal | null
    senha: string | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id_usuario: number | null
    nome: string | null
    email: string | null
    idade: number | null
    altura: Decimal | null
    peso: Decimal | null
    senha: string | null
  }

  export type UsuariosCountAggregateOutputType = {
    id_usuario: number
    nome: number
    email: number
    idade: number
    altura: number
    peso: number
    senha: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id_usuario?: true
    idade?: true
    altura?: true
    peso?: true
  }

  export type UsuariosSumAggregateInputType = {
    id_usuario?: true
    idade?: true
    altura?: true
    peso?: true
  }

  export type UsuariosMinAggregateInputType = {
    id_usuario?: true
    nome?: true
    email?: true
    idade?: true
    altura?: true
    peso?: true
    senha?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id_usuario?: true
    nome?: true
    email?: true
    idade?: true
    altura?: true
    peso?: true
    senha?: true
  }

  export type UsuariosCountAggregateInputType = {
    id_usuario?: true
    nome?: true
    email?: true
    idade?: true
    altura?: true
    peso?: true
    senha?: true
    _all?: true
  }

  export type UsuariosAggregateArgs = {
    /**
     * Filter which Usuarios to aggregate.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type UsuariosGroupByArgs = {
    where?: UsuariosWhereInput
    orderBy?: Enumerable<UsuariosOrderByWithAggregationInput>
    by: UsuariosScalarFieldEnum[]
    having?: UsuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }


  export type UsuariosGroupByOutputType = {
    id_usuario: number
    nome: string
    email: string
    idade: number
    altura: Decimal
    peso: Decimal
    senha: string
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends UsuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type UsuariosSelect = {
    id_usuario?: boolean
    nome?: boolean
    email?: boolean
    idade?: boolean
    altura?: boolean
    peso?: boolean
    senha?: boolean
    treinos?: boolean | Usuarios$treinosArgs
    exercicio?: boolean | Usuarios$exercicioArgs
    _count?: boolean | UsuariosCountOutputTypeArgs
  }


  export type UsuariosInclude = {
    treinos?: boolean | Usuarios$treinosArgs
    exercicio?: boolean | Usuarios$exercicioArgs
    _count?: boolean | UsuariosCountOutputTypeArgs
  }

  export type UsuariosGetPayload<S extends boolean | null | undefined | UsuariosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Usuarios :
    S extends undefined ? never :
    S extends { include: any } & (UsuariosArgs | UsuariosFindManyArgs)
    ? Usuarios  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'treinos' ? Array < TreinosGetPayload<S['include'][P]>>  :
        P extends 'exercicio' ? Array < ExercicioGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuariosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UsuariosArgs | UsuariosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'treinos' ? Array < TreinosGetPayload<S['select'][P]>>  :
        P extends 'exercicio' ? Array < ExercicioGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuariosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Usuarios ? Usuarios[P] : never
  } 
      : Usuarios


  type UsuariosCountArgs = 
    Omit<UsuariosFindManyArgs, 'select' | 'include'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface UsuariosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {UsuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuariosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuariosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuarios'> extends True ? Prisma__UsuariosClient<UsuariosGetPayload<T>> : Prisma__UsuariosClient<UsuariosGetPayload<T> | null, null>

    /**
     * Find one Usuarios that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuariosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsuariosFindUniqueOrThrowArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuariosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuariosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuarios'> extends True ? Prisma__UsuariosClient<UsuariosGetPayload<T>> : Prisma__UsuariosClient<UsuariosGetPayload<T> | null, null>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuariosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsuariosFindFirstOrThrowArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id_usuario`
     * const usuariosWithId_usuarioOnly = await prisma.usuarios.findMany({ select: { id_usuario: true } })
     * 
    **/
    findMany<T extends UsuariosFindManyArgs>(
      args?: SelectSubset<T, UsuariosFindManyArgs>
    ): Prisma.PrismaPromise<Array<UsuariosGetPayload<T>>>

    /**
     * Create a Usuarios.
     * @param {UsuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
    **/
    create<T extends UsuariosCreateArgs>(
      args: SelectSubset<T, UsuariosCreateArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Create many Usuarios.
     *     @param {UsuariosCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuarios = await prisma.usuarios.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuariosCreateManyArgs>(
      args?: SelectSubset<T, UsuariosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuarios.
     * @param {UsuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
    **/
    delete<T extends UsuariosDeleteArgs>(
      args: SelectSubset<T, UsuariosDeleteArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Update one Usuarios.
     * @param {UsuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuariosUpdateArgs>(
      args: SelectSubset<T, UsuariosUpdateArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuariosDeleteManyArgs>(
      args?: SelectSubset<T, UsuariosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuariosUpdateManyArgs>(
      args: SelectSubset<T, UsuariosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuarios.
     * @param {UsuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
    **/
    upsert<T extends UsuariosUpsertArgs>(
      args: SelectSubset<T, UsuariosUpsertArgs>
    ): Prisma__UsuariosClient<UsuariosGetPayload<T>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuariosCountArgs>(
      args?: Subset<T, UsuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuariosGroupByArgs['orderBy'] }
        : { orderBy?: UsuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuariosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    treinos<T extends Usuarios$treinosArgs= {}>(args?: Subset<T, Usuarios$treinosArgs>): Prisma.PrismaPromise<Array<TreinosGetPayload<T>>| Null>;

    exercicio<T extends Usuarios$exercicioArgs= {}>(args?: Subset<T, Usuarios$exercicioArgs>): Prisma.PrismaPromise<Array<ExercicioGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuarios base type for findUnique actions
   */
  export type UsuariosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }

  /**
   * Usuarios findUnique
   */
  export interface UsuariosFindUniqueArgs extends UsuariosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuarios findUniqueOrThrow
   */
  export type UsuariosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where: UsuariosWhereUniqueInput
  }


  /**
   * Usuarios base type for findFirst actions
   */
  export type UsuariosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }

  /**
   * Usuarios findFirst
   */
  export interface UsuariosFindFirstArgs extends UsuariosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuarios findFirstOrThrow
   */
  export type UsuariosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * Usuarios findMany
   */
  export type UsuariosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: Enumerable<UsuariosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: Enumerable<UsuariosScalarFieldEnum>
  }


  /**
   * Usuarios create
   */
  export type UsuariosCreateArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * The data needed to create a Usuarios.
     */
    data: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
  }


  /**
   * Usuarios createMany
   */
  export type UsuariosCreateManyArgs = {
    /**
     * The data used to create many Usuarios.
     */
    data: Enumerable<UsuariosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Usuarios update
   */
  export type UsuariosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * The data needed to update a Usuarios.
     */
    data: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
    /**
     * Choose, which Usuarios to update.
     */
    where: UsuariosWhereUniqueInput
  }


  /**
   * Usuarios updateMany
   */
  export type UsuariosUpdateManyArgs = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuariosUpdateManyMutationInput, UsuariosUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuariosWhereInput
  }


  /**
   * Usuarios upsert
   */
  export type UsuariosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * The filter to search for the Usuarios to update in case it exists.
     */
    where: UsuariosWhereUniqueInput
    /**
     * In case the Usuarios found by the `where` argument doesn't exist, create a new Usuarios with this data.
     */
    create: XOR<UsuariosCreateInput, UsuariosUncheckedCreateInput>
    /**
     * In case the Usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuariosUpdateInput, UsuariosUncheckedUpdateInput>
  }


  /**
   * Usuarios delete
   */
  export type UsuariosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
    /**
     * Filter which Usuarios to delete.
     */
    where: UsuariosWhereUniqueInput
  }


  /**
   * Usuarios deleteMany
   */
  export type UsuariosDeleteManyArgs = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuariosWhereInput
  }


  /**
   * Usuarios.treinos
   */
  export type Usuarios$treinosArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    where?: TreinosWhereInput
    orderBy?: Enumerable<TreinosOrderByWithRelationInput>
    cursor?: TreinosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TreinosScalarFieldEnum>
  }


  /**
   * Usuarios.exercicio
   */
  export type Usuarios$exercicioArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    where?: ExercicioWhereInput
    orderBy?: Enumerable<ExercicioOrderByWithRelationInput>
    cursor?: ExercicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }


  /**
   * Usuarios without action
   */
  export type UsuariosArgs = {
    /**
     * Select specific fields to fetch from the Usuarios
     */
    select?: UsuariosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsuariosInclude | null
  }



  /**
   * Model Treinos
   */


  export type AggregateTreinos = {
    _count: TreinosCountAggregateOutputType | null
    _avg: TreinosAvgAggregateOutputType | null
    _sum: TreinosSumAggregateOutputType | null
    _min: TreinosMinAggregateOutputType | null
    _max: TreinosMaxAggregateOutputType | null
  }

  export type TreinosAvgAggregateOutputType = {
    id_treino: number | null
    id_usuario: number | null
  }

  export type TreinosSumAggregateOutputType = {
    id_treino: number | null
    id_usuario: number | null
  }

  export type TreinosMinAggregateOutputType = {
    id_treino: number | null
    nome: string | null
    id_usuario: number | null
  }

  export type TreinosMaxAggregateOutputType = {
    id_treino: number | null
    nome: string | null
    id_usuario: number | null
  }

  export type TreinosCountAggregateOutputType = {
    id_treino: number
    nome: number
    id_usuario: number
    _all: number
  }


  export type TreinosAvgAggregateInputType = {
    id_treino?: true
    id_usuario?: true
  }

  export type TreinosSumAggregateInputType = {
    id_treino?: true
    id_usuario?: true
  }

  export type TreinosMinAggregateInputType = {
    id_treino?: true
    nome?: true
    id_usuario?: true
  }

  export type TreinosMaxAggregateInputType = {
    id_treino?: true
    nome?: true
    id_usuario?: true
  }

  export type TreinosCountAggregateInputType = {
    id_treino?: true
    nome?: true
    id_usuario?: true
    _all?: true
  }

  export type TreinosAggregateArgs = {
    /**
     * Filter which Treinos to aggregate.
     */
    where?: TreinosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treinos to fetch.
     */
    orderBy?: Enumerable<TreinosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreinosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Treinos
    **/
    _count?: true | TreinosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreinosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreinosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreinosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreinosMaxAggregateInputType
  }

  export type GetTreinosAggregateType<T extends TreinosAggregateArgs> = {
        [P in keyof T & keyof AggregateTreinos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreinos[P]>
      : GetScalarType<T[P], AggregateTreinos[P]>
  }




  export type TreinosGroupByArgs = {
    where?: TreinosWhereInput
    orderBy?: Enumerable<TreinosOrderByWithAggregationInput>
    by: TreinosScalarFieldEnum[]
    having?: TreinosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreinosCountAggregateInputType | true
    _avg?: TreinosAvgAggregateInputType
    _sum?: TreinosSumAggregateInputType
    _min?: TreinosMinAggregateInputType
    _max?: TreinosMaxAggregateInputType
  }


  export type TreinosGroupByOutputType = {
    id_treino: number
    nome: string
    id_usuario: number
    _count: TreinosCountAggregateOutputType | null
    _avg: TreinosAvgAggregateOutputType | null
    _sum: TreinosSumAggregateOutputType | null
    _min: TreinosMinAggregateOutputType | null
    _max: TreinosMaxAggregateOutputType | null
  }

  type GetTreinosGroupByPayload<T extends TreinosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TreinosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreinosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreinosGroupByOutputType[P]>
            : GetScalarType<T[P], TreinosGroupByOutputType[P]>
        }
      >
    >


  export type TreinosSelect = {
    id_treino?: boolean
    nome?: boolean
    id_usuario?: boolean
    usuarios?: boolean | UsuariosArgs
    exercicio?: boolean | Treinos$exercicioArgs
    _count?: boolean | TreinosCountOutputTypeArgs
  }


  export type TreinosInclude = {
    usuarios?: boolean | UsuariosArgs
    exercicio?: boolean | Treinos$exercicioArgs
    _count?: boolean | TreinosCountOutputTypeArgs
  }

  export type TreinosGetPayload<S extends boolean | null | undefined | TreinosArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Treinos :
    S extends undefined ? never :
    S extends { include: any } & (TreinosArgs | TreinosFindManyArgs)
    ? Treinos  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'usuarios' ? UsuariosGetPayload<S['include'][P]> :
        P extends 'exercicio' ? Array < ExercicioGetPayload<S['include'][P]>>  :
        P extends '_count' ? TreinosCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TreinosArgs | TreinosFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'usuarios' ? UsuariosGetPayload<S['select'][P]> :
        P extends 'exercicio' ? Array < ExercicioGetPayload<S['select'][P]>>  :
        P extends '_count' ? TreinosCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Treinos ? Treinos[P] : never
  } 
      : Treinos


  type TreinosCountArgs = 
    Omit<TreinosFindManyArgs, 'select' | 'include'> & {
      select?: TreinosCountAggregateInputType | true
    }

  export interface TreinosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Treinos that matches the filter.
     * @param {TreinosFindUniqueArgs} args - Arguments to find a Treinos
     * @example
     * // Get one Treinos
     * const treinos = await prisma.treinos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TreinosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TreinosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Treinos'> extends True ? Prisma__TreinosClient<TreinosGetPayload<T>> : Prisma__TreinosClient<TreinosGetPayload<T> | null, null>

    /**
     * Find one Treinos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TreinosFindUniqueOrThrowArgs} args - Arguments to find a Treinos
     * @example
     * // Get one Treinos
     * const treinos = await prisma.treinos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TreinosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TreinosFindUniqueOrThrowArgs>
    ): Prisma__TreinosClient<TreinosGetPayload<T>>

    /**
     * Find the first Treinos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinosFindFirstArgs} args - Arguments to find a Treinos
     * @example
     * // Get one Treinos
     * const treinos = await prisma.treinos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TreinosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TreinosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Treinos'> extends True ? Prisma__TreinosClient<TreinosGetPayload<T>> : Prisma__TreinosClient<TreinosGetPayload<T> | null, null>

    /**
     * Find the first Treinos that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinosFindFirstOrThrowArgs} args - Arguments to find a Treinos
     * @example
     * // Get one Treinos
     * const treinos = await prisma.treinos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TreinosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TreinosFindFirstOrThrowArgs>
    ): Prisma__TreinosClient<TreinosGetPayload<T>>

    /**
     * Find zero or more Treinos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Treinos
     * const treinos = await prisma.treinos.findMany()
     * 
     * // Get first 10 Treinos
     * const treinos = await prisma.treinos.findMany({ take: 10 })
     * 
     * // Only select the `id_treino`
     * const treinosWithId_treinoOnly = await prisma.treinos.findMany({ select: { id_treino: true } })
     * 
    **/
    findMany<T extends TreinosFindManyArgs>(
      args?: SelectSubset<T, TreinosFindManyArgs>
    ): Prisma.PrismaPromise<Array<TreinosGetPayload<T>>>

    /**
     * Create a Treinos.
     * @param {TreinosCreateArgs} args - Arguments to create a Treinos.
     * @example
     * // Create one Treinos
     * const Treinos = await prisma.treinos.create({
     *   data: {
     *     // ... data to create a Treinos
     *   }
     * })
     * 
    **/
    create<T extends TreinosCreateArgs>(
      args: SelectSubset<T, TreinosCreateArgs>
    ): Prisma__TreinosClient<TreinosGetPayload<T>>

    /**
     * Create many Treinos.
     *     @param {TreinosCreateManyArgs} args - Arguments to create many Treinos.
     *     @example
     *     // Create many Treinos
     *     const treinos = await prisma.treinos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TreinosCreateManyArgs>(
      args?: SelectSubset<T, TreinosCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Treinos.
     * @param {TreinosDeleteArgs} args - Arguments to delete one Treinos.
     * @example
     * // Delete one Treinos
     * const Treinos = await prisma.treinos.delete({
     *   where: {
     *     // ... filter to delete one Treinos
     *   }
     * })
     * 
    **/
    delete<T extends TreinosDeleteArgs>(
      args: SelectSubset<T, TreinosDeleteArgs>
    ): Prisma__TreinosClient<TreinosGetPayload<T>>

    /**
     * Update one Treinos.
     * @param {TreinosUpdateArgs} args - Arguments to update one Treinos.
     * @example
     * // Update one Treinos
     * const treinos = await prisma.treinos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TreinosUpdateArgs>(
      args: SelectSubset<T, TreinosUpdateArgs>
    ): Prisma__TreinosClient<TreinosGetPayload<T>>

    /**
     * Delete zero or more Treinos.
     * @param {TreinosDeleteManyArgs} args - Arguments to filter Treinos to delete.
     * @example
     * // Delete a few Treinos
     * const { count } = await prisma.treinos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TreinosDeleteManyArgs>(
      args?: SelectSubset<T, TreinosDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Treinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Treinos
     * const treinos = await prisma.treinos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TreinosUpdateManyArgs>(
      args: SelectSubset<T, TreinosUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Treinos.
     * @param {TreinosUpsertArgs} args - Arguments to update or create a Treinos.
     * @example
     * // Update or create a Treinos
     * const treinos = await prisma.treinos.upsert({
     *   create: {
     *     // ... data to create a Treinos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Treinos we want to update
     *   }
     * })
    **/
    upsert<T extends TreinosUpsertArgs>(
      args: SelectSubset<T, TreinosUpsertArgs>
    ): Prisma__TreinosClient<TreinosGetPayload<T>>

    /**
     * Count the number of Treinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinosCountArgs} args - Arguments to filter Treinos to count.
     * @example
     * // Count the number of Treinos
     * const count = await prisma.treinos.count({
     *   where: {
     *     // ... the filter for the Treinos we want to count
     *   }
     * })
    **/
    count<T extends TreinosCountArgs>(
      args?: Subset<T, TreinosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreinosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Treinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreinosAggregateArgs>(args: Subset<T, TreinosAggregateArgs>): Prisma.PrismaPromise<GetTreinosAggregateType<T>>

    /**
     * Group by Treinos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreinosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreinosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreinosGroupByArgs['orderBy'] }
        : { orderBy?: TreinosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreinosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreinosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Treinos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TreinosClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    usuarios<T extends UsuariosArgs= {}>(args?: Subset<T, UsuariosArgs>): Prisma__UsuariosClient<UsuariosGetPayload<T> | Null>;

    exercicio<T extends Treinos$exercicioArgs= {}>(args?: Subset<T, Treinos$exercicioArgs>): Prisma.PrismaPromise<Array<ExercicioGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Treinos base type for findUnique actions
   */
  export type TreinosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * Filter, which Treinos to fetch.
     */
    where: TreinosWhereUniqueInput
  }

  /**
   * Treinos findUnique
   */
  export interface TreinosFindUniqueArgs extends TreinosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Treinos findUniqueOrThrow
   */
  export type TreinosFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * Filter, which Treinos to fetch.
     */
    where: TreinosWhereUniqueInput
  }


  /**
   * Treinos base type for findFirst actions
   */
  export type TreinosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * Filter, which Treinos to fetch.
     */
    where?: TreinosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treinos to fetch.
     */
    orderBy?: Enumerable<TreinosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treinos.
     */
    cursor?: TreinosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treinos.
     */
    distinct?: Enumerable<TreinosScalarFieldEnum>
  }

  /**
   * Treinos findFirst
   */
  export interface TreinosFindFirstArgs extends TreinosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Treinos findFirstOrThrow
   */
  export type TreinosFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * Filter, which Treinos to fetch.
     */
    where?: TreinosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treinos to fetch.
     */
    orderBy?: Enumerable<TreinosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Treinos.
     */
    cursor?: TreinosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treinos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Treinos.
     */
    distinct?: Enumerable<TreinosScalarFieldEnum>
  }


  /**
   * Treinos findMany
   */
  export type TreinosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * Filter, which Treinos to fetch.
     */
    where?: TreinosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Treinos to fetch.
     */
    orderBy?: Enumerable<TreinosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Treinos.
     */
    cursor?: TreinosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Treinos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Treinos.
     */
    skip?: number
    distinct?: Enumerable<TreinosScalarFieldEnum>
  }


  /**
   * Treinos create
   */
  export type TreinosCreateArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * The data needed to create a Treinos.
     */
    data: XOR<TreinosCreateInput, TreinosUncheckedCreateInput>
  }


  /**
   * Treinos createMany
   */
  export type TreinosCreateManyArgs = {
    /**
     * The data used to create many Treinos.
     */
    data: Enumerable<TreinosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Treinos update
   */
  export type TreinosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * The data needed to update a Treinos.
     */
    data: XOR<TreinosUpdateInput, TreinosUncheckedUpdateInput>
    /**
     * Choose, which Treinos to update.
     */
    where: TreinosWhereUniqueInput
  }


  /**
   * Treinos updateMany
   */
  export type TreinosUpdateManyArgs = {
    /**
     * The data used to update Treinos.
     */
    data: XOR<TreinosUpdateManyMutationInput, TreinosUncheckedUpdateManyInput>
    /**
     * Filter which Treinos to update
     */
    where?: TreinosWhereInput
  }


  /**
   * Treinos upsert
   */
  export type TreinosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * The filter to search for the Treinos to update in case it exists.
     */
    where: TreinosWhereUniqueInput
    /**
     * In case the Treinos found by the `where` argument doesn't exist, create a new Treinos with this data.
     */
    create: XOR<TreinosCreateInput, TreinosUncheckedCreateInput>
    /**
     * In case the Treinos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreinosUpdateInput, TreinosUncheckedUpdateInput>
  }


  /**
   * Treinos delete
   */
  export type TreinosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
    /**
     * Filter which Treinos to delete.
     */
    where: TreinosWhereUniqueInput
  }


  /**
   * Treinos deleteMany
   */
  export type TreinosDeleteManyArgs = {
    /**
     * Filter which Treinos to delete
     */
    where?: TreinosWhereInput
  }


  /**
   * Treinos.exercicio
   */
  export type Treinos$exercicioArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    where?: ExercicioWhereInput
    orderBy?: Enumerable<ExercicioOrderByWithRelationInput>
    cursor?: ExercicioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }


  /**
   * Treinos without action
   */
  export type TreinosArgs = {
    /**
     * Select specific fields to fetch from the Treinos
     */
    select?: TreinosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TreinosInclude | null
  }



  /**
   * Model Exercicio
   */


  export type AggregateExercicio = {
    _count: ExercicioCountAggregateOutputType | null
    _avg: ExercicioAvgAggregateOutputType | null
    _sum: ExercicioSumAggregateOutputType | null
    _min: ExercicioMinAggregateOutputType | null
    _max: ExercicioMaxAggregateOutputType | null
  }

  export type ExercicioAvgAggregateOutputType = {
    id_exercicio: number | null
    series: number | null
    repeticoes: number | null
    carga: Decimal | null
    id_usuario: number | null
    id_treino: number | null
  }

  export type ExercicioSumAggregateOutputType = {
    id_exercicio: number | null
    series: number | null
    repeticoes: number | null
    carga: Decimal | null
    id_usuario: number | null
    id_treino: number | null
  }

  export type ExercicioMinAggregateOutputType = {
    id_exercicio: number | null
    series: number | null
    repeticoes: number | null
    carga: Decimal | null
    nome: string | null
    id_usuario: number | null
    id_treino: number | null
  }

  export type ExercicioMaxAggregateOutputType = {
    id_exercicio: number | null
    series: number | null
    repeticoes: number | null
    carga: Decimal | null
    nome: string | null
    id_usuario: number | null
    id_treino: number | null
  }

  export type ExercicioCountAggregateOutputType = {
    id_exercicio: number
    series: number
    repeticoes: number
    carga: number
    nome: number
    id_usuario: number
    id_treino: number
    _all: number
  }


  export type ExercicioAvgAggregateInputType = {
    id_exercicio?: true
    series?: true
    repeticoes?: true
    carga?: true
    id_usuario?: true
    id_treino?: true
  }

  export type ExercicioSumAggregateInputType = {
    id_exercicio?: true
    series?: true
    repeticoes?: true
    carga?: true
    id_usuario?: true
    id_treino?: true
  }

  export type ExercicioMinAggregateInputType = {
    id_exercicio?: true
    series?: true
    repeticoes?: true
    carga?: true
    nome?: true
    id_usuario?: true
    id_treino?: true
  }

  export type ExercicioMaxAggregateInputType = {
    id_exercicio?: true
    series?: true
    repeticoes?: true
    carga?: true
    nome?: true
    id_usuario?: true
    id_treino?: true
  }

  export type ExercicioCountAggregateInputType = {
    id_exercicio?: true
    series?: true
    repeticoes?: true
    carga?: true
    nome?: true
    id_usuario?: true
    id_treino?: true
    _all?: true
  }

  export type ExercicioAggregateArgs = {
    /**
     * Filter which Exercicio to aggregate.
     */
    where?: ExercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercicios to fetch.
     */
    orderBy?: Enumerable<ExercicioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercicios
    **/
    _count?: true | ExercicioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExercicioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExercicioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExercicioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExercicioMaxAggregateInputType
  }

  export type GetExercicioAggregateType<T extends ExercicioAggregateArgs> = {
        [P in keyof T & keyof AggregateExercicio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercicio[P]>
      : GetScalarType<T[P], AggregateExercicio[P]>
  }




  export type ExercicioGroupByArgs = {
    where?: ExercicioWhereInput
    orderBy?: Enumerable<ExercicioOrderByWithAggregationInput>
    by: ExercicioScalarFieldEnum[]
    having?: ExercicioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExercicioCountAggregateInputType | true
    _avg?: ExercicioAvgAggregateInputType
    _sum?: ExercicioSumAggregateInputType
    _min?: ExercicioMinAggregateInputType
    _max?: ExercicioMaxAggregateInputType
  }


  export type ExercicioGroupByOutputType = {
    id_exercicio: number
    series: number
    repeticoes: number
    carga: Decimal
    nome: string
    id_usuario: number
    id_treino: number
    _count: ExercicioCountAggregateOutputType | null
    _avg: ExercicioAvgAggregateOutputType | null
    _sum: ExercicioSumAggregateOutputType | null
    _min: ExercicioMinAggregateOutputType | null
    _max: ExercicioMaxAggregateOutputType | null
  }

  type GetExercicioGroupByPayload<T extends ExercicioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ExercicioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExercicioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExercicioGroupByOutputType[P]>
            : GetScalarType<T[P], ExercicioGroupByOutputType[P]>
        }
      >
    >


  export type ExercicioSelect = {
    id_exercicio?: boolean
    series?: boolean
    repeticoes?: boolean
    carga?: boolean
    nome?: boolean
    id_usuario?: boolean
    id_treino?: boolean
    usuarios?: boolean | UsuariosArgs
    treinos?: boolean | TreinosArgs
  }


  export type ExercicioInclude = {
    usuarios?: boolean | UsuariosArgs
    treinos?: boolean | TreinosArgs
  }

  export type ExercicioGetPayload<S extends boolean | null | undefined | ExercicioArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Exercicio :
    S extends undefined ? never :
    S extends { include: any } & (ExercicioArgs | ExercicioFindManyArgs)
    ? Exercicio  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'usuarios' ? UsuariosGetPayload<S['include'][P]> :
        P extends 'treinos' ? TreinosGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ExercicioArgs | ExercicioFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'usuarios' ? UsuariosGetPayload<S['select'][P]> :
        P extends 'treinos' ? TreinosGetPayload<S['select'][P]> :  P extends keyof Exercicio ? Exercicio[P] : never
  } 
      : Exercicio


  type ExercicioCountArgs = 
    Omit<ExercicioFindManyArgs, 'select' | 'include'> & {
      select?: ExercicioCountAggregateInputType | true
    }

  export interface ExercicioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Exercicio that matches the filter.
     * @param {ExercicioFindUniqueArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExercicioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExercicioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Exercicio'> extends True ? Prisma__ExercicioClient<ExercicioGetPayload<T>> : Prisma__ExercicioClient<ExercicioGetPayload<T> | null, null>

    /**
     * Find one Exercicio that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExercicioFindUniqueOrThrowArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExercicioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ExercicioFindUniqueOrThrowArgs>
    ): Prisma__ExercicioClient<ExercicioGetPayload<T>>

    /**
     * Find the first Exercicio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioFindFirstArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExercicioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExercicioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Exercicio'> extends True ? Prisma__ExercicioClient<ExercicioGetPayload<T>> : Prisma__ExercicioClient<ExercicioGetPayload<T> | null, null>

    /**
     * Find the first Exercicio that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioFindFirstOrThrowArgs} args - Arguments to find a Exercicio
     * @example
     * // Get one Exercicio
     * const exercicio = await prisma.exercicio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExercicioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ExercicioFindFirstOrThrowArgs>
    ): Prisma__ExercicioClient<ExercicioGetPayload<T>>

    /**
     * Find zero or more Exercicios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercicios
     * const exercicios = await prisma.exercicio.findMany()
     * 
     * // Get first 10 Exercicios
     * const exercicios = await prisma.exercicio.findMany({ take: 10 })
     * 
     * // Only select the `id_exercicio`
     * const exercicioWithId_exercicioOnly = await prisma.exercicio.findMany({ select: { id_exercicio: true } })
     * 
    **/
    findMany<T extends ExercicioFindManyArgs>(
      args?: SelectSubset<T, ExercicioFindManyArgs>
    ): Prisma.PrismaPromise<Array<ExercicioGetPayload<T>>>

    /**
     * Create a Exercicio.
     * @param {ExercicioCreateArgs} args - Arguments to create a Exercicio.
     * @example
     * // Create one Exercicio
     * const Exercicio = await prisma.exercicio.create({
     *   data: {
     *     // ... data to create a Exercicio
     *   }
     * })
     * 
    **/
    create<T extends ExercicioCreateArgs>(
      args: SelectSubset<T, ExercicioCreateArgs>
    ): Prisma__ExercicioClient<ExercicioGetPayload<T>>

    /**
     * Create many Exercicios.
     *     @param {ExercicioCreateManyArgs} args - Arguments to create many Exercicios.
     *     @example
     *     // Create many Exercicios
     *     const exercicio = await prisma.exercicio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExercicioCreateManyArgs>(
      args?: SelectSubset<T, ExercicioCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exercicio.
     * @param {ExercicioDeleteArgs} args - Arguments to delete one Exercicio.
     * @example
     * // Delete one Exercicio
     * const Exercicio = await prisma.exercicio.delete({
     *   where: {
     *     // ... filter to delete one Exercicio
     *   }
     * })
     * 
    **/
    delete<T extends ExercicioDeleteArgs>(
      args: SelectSubset<T, ExercicioDeleteArgs>
    ): Prisma__ExercicioClient<ExercicioGetPayload<T>>

    /**
     * Update one Exercicio.
     * @param {ExercicioUpdateArgs} args - Arguments to update one Exercicio.
     * @example
     * // Update one Exercicio
     * const exercicio = await prisma.exercicio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExercicioUpdateArgs>(
      args: SelectSubset<T, ExercicioUpdateArgs>
    ): Prisma__ExercicioClient<ExercicioGetPayload<T>>

    /**
     * Delete zero or more Exercicios.
     * @param {ExercicioDeleteManyArgs} args - Arguments to filter Exercicios to delete.
     * @example
     * // Delete a few Exercicios
     * const { count } = await prisma.exercicio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExercicioDeleteManyArgs>(
      args?: SelectSubset<T, ExercicioDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercicios
     * const exercicio = await prisma.exercicio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExercicioUpdateManyArgs>(
      args: SelectSubset<T, ExercicioUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercicio.
     * @param {ExercicioUpsertArgs} args - Arguments to update or create a Exercicio.
     * @example
     * // Update or create a Exercicio
     * const exercicio = await prisma.exercicio.upsert({
     *   create: {
     *     // ... data to create a Exercicio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercicio we want to update
     *   }
     * })
    **/
    upsert<T extends ExercicioUpsertArgs>(
      args: SelectSubset<T, ExercicioUpsertArgs>
    ): Prisma__ExercicioClient<ExercicioGetPayload<T>>

    /**
     * Count the number of Exercicios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioCountArgs} args - Arguments to filter Exercicios to count.
     * @example
     * // Count the number of Exercicios
     * const count = await prisma.exercicio.count({
     *   where: {
     *     // ... the filter for the Exercicios we want to count
     *   }
     * })
    **/
    count<T extends ExercicioCountArgs>(
      args?: Subset<T, ExercicioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExercicioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExercicioAggregateArgs>(args: Subset<T, ExercicioAggregateArgs>): Prisma.PrismaPromise<GetExercicioAggregateType<T>>

    /**
     * Group by Exercicio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercicioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExercicioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExercicioGroupByArgs['orderBy'] }
        : { orderBy?: ExercicioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExercicioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExercicioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercicio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExercicioClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    usuarios<T extends UsuariosArgs= {}>(args?: Subset<T, UsuariosArgs>): Prisma__UsuariosClient<UsuariosGetPayload<T> | Null>;

    treinos<T extends TreinosArgs= {}>(args?: Subset<T, TreinosArgs>): Prisma__TreinosClient<TreinosGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Exercicio base type for findUnique actions
   */
  export type ExercicioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * Filter, which Exercicio to fetch.
     */
    where: ExercicioWhereUniqueInput
  }

  /**
   * Exercicio findUnique
   */
  export interface ExercicioFindUniqueArgs extends ExercicioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Exercicio findUniqueOrThrow
   */
  export type ExercicioFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * Filter, which Exercicio to fetch.
     */
    where: ExercicioWhereUniqueInput
  }


  /**
   * Exercicio base type for findFirst actions
   */
  export type ExercicioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * Filter, which Exercicio to fetch.
     */
    where?: ExercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercicios to fetch.
     */
    orderBy?: Enumerable<ExercicioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercicios.
     */
    cursor?: ExercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercicios.
     */
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }

  /**
   * Exercicio findFirst
   */
  export interface ExercicioFindFirstArgs extends ExercicioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Exercicio findFirstOrThrow
   */
  export type ExercicioFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * Filter, which Exercicio to fetch.
     */
    where?: ExercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercicios to fetch.
     */
    orderBy?: Enumerable<ExercicioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercicios.
     */
    cursor?: ExercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercicios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercicios.
     */
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }


  /**
   * Exercicio findMany
   */
  export type ExercicioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * Filter, which Exercicios to fetch.
     */
    where?: ExercicioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercicios to fetch.
     */
    orderBy?: Enumerable<ExercicioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercicios.
     */
    cursor?: ExercicioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercicios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercicios.
     */
    skip?: number
    distinct?: Enumerable<ExercicioScalarFieldEnum>
  }


  /**
   * Exercicio create
   */
  export type ExercicioCreateArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * The data needed to create a Exercicio.
     */
    data: XOR<ExercicioCreateInput, ExercicioUncheckedCreateInput>
  }


  /**
   * Exercicio createMany
   */
  export type ExercicioCreateManyArgs = {
    /**
     * The data used to create many Exercicios.
     */
    data: Enumerable<ExercicioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Exercicio update
   */
  export type ExercicioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * The data needed to update a Exercicio.
     */
    data: XOR<ExercicioUpdateInput, ExercicioUncheckedUpdateInput>
    /**
     * Choose, which Exercicio to update.
     */
    where: ExercicioWhereUniqueInput
  }


  /**
   * Exercicio updateMany
   */
  export type ExercicioUpdateManyArgs = {
    /**
     * The data used to update Exercicios.
     */
    data: XOR<ExercicioUpdateManyMutationInput, ExercicioUncheckedUpdateManyInput>
    /**
     * Filter which Exercicios to update
     */
    where?: ExercicioWhereInput
  }


  /**
   * Exercicio upsert
   */
  export type ExercicioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * The filter to search for the Exercicio to update in case it exists.
     */
    where: ExercicioWhereUniqueInput
    /**
     * In case the Exercicio found by the `where` argument doesn't exist, create a new Exercicio with this data.
     */
    create: XOR<ExercicioCreateInput, ExercicioUncheckedCreateInput>
    /**
     * In case the Exercicio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExercicioUpdateInput, ExercicioUncheckedUpdateInput>
  }


  /**
   * Exercicio delete
   */
  export type ExercicioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
    /**
     * Filter which Exercicio to delete.
     */
    where: ExercicioWhereUniqueInput
  }


  /**
   * Exercicio deleteMany
   */
  export type ExercicioDeleteManyArgs = {
    /**
     * Filter which Exercicios to delete
     */
    where?: ExercicioWhereInput
  }


  /**
   * Exercicio without action
   */
  export type ExercicioArgs = {
    /**
     * Select specific fields to fetch from the Exercicio
     */
    select?: ExercicioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ExercicioInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ExercicioScalarFieldEnum: {
    id_exercicio: 'id_exercicio',
    series: 'series',
    repeticoes: 'repeticoes',
    carga: 'carga',
    nome: 'nome',
    id_usuario: 'id_usuario',
    id_treino: 'id_treino'
  };

  export type ExercicioScalarFieldEnum = (typeof ExercicioScalarFieldEnum)[keyof typeof ExercicioScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TreinosScalarFieldEnum: {
    id_treino: 'id_treino',
    nome: 'nome',
    id_usuario: 'id_usuario'
  };

  export type TreinosScalarFieldEnum = (typeof TreinosScalarFieldEnum)[keyof typeof TreinosScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    id_usuario: 'id_usuario',
    nome: 'nome',
    email: 'email',
    idade: 'idade',
    altura: 'altura',
    peso: 'peso',
    senha: 'senha'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UsuariosWhereInput = {
    AND?: Enumerable<UsuariosWhereInput>
    OR?: Enumerable<UsuariosWhereInput>
    NOT?: Enumerable<UsuariosWhereInput>
    id_usuario?: IntFilter | number
    nome?: StringFilter | string
    email?: StringFilter | string
    idade?: IntFilter | number
    altura?: DecimalFilter | Decimal | DecimalJsLike | number | string
    peso?: DecimalFilter | Decimal | DecimalJsLike | number | string
    senha?: StringFilter | string
    treinos?: TreinosListRelationFilter
    exercicio?: ExercicioListRelationFilter
  }

  export type UsuariosOrderByWithRelationInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
    senha?: SortOrder
    treinos?: TreinosOrderByRelationAggregateInput
    exercicio?: ExercicioOrderByRelationAggregateInput
  }

  export type UsuariosWhereUniqueInput = {
    id_usuario?: number
  }

  export type UsuariosOrderByWithAggregationInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
    senha?: SortOrder
    _count?: UsuariosCountOrderByAggregateInput
    _avg?: UsuariosAvgOrderByAggregateInput
    _max?: UsuariosMaxOrderByAggregateInput
    _min?: UsuariosMinOrderByAggregateInput
    _sum?: UsuariosSumOrderByAggregateInput
  }

  export type UsuariosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuariosScalarWhereWithAggregatesInput>
    id_usuario?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    idade?: IntWithAggregatesFilter | number
    altura?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    peso?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    senha?: StringWithAggregatesFilter | string
  }

  export type TreinosWhereInput = {
    AND?: Enumerable<TreinosWhereInput>
    OR?: Enumerable<TreinosWhereInput>
    NOT?: Enumerable<TreinosWhereInput>
    id_treino?: IntFilter | number
    nome?: StringFilter | string
    id_usuario?: IntFilter | number
    usuarios?: XOR<UsuariosRelationFilter, UsuariosWhereInput>
    exercicio?: ExercicioListRelationFilter
  }

  export type TreinosOrderByWithRelationInput = {
    id_treino?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
    usuarios?: UsuariosOrderByWithRelationInput
    exercicio?: ExercicioOrderByRelationAggregateInput
  }

  export type TreinosWhereUniqueInput = {
    id_treino?: number
  }

  export type TreinosOrderByWithAggregationInput = {
    id_treino?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
    _count?: TreinosCountOrderByAggregateInput
    _avg?: TreinosAvgOrderByAggregateInput
    _max?: TreinosMaxOrderByAggregateInput
    _min?: TreinosMinOrderByAggregateInput
    _sum?: TreinosSumOrderByAggregateInput
  }

  export type TreinosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TreinosScalarWhereWithAggregatesInput>
    OR?: Enumerable<TreinosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TreinosScalarWhereWithAggregatesInput>
    id_treino?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    id_usuario?: IntWithAggregatesFilter | number
  }

  export type ExercicioWhereInput = {
    AND?: Enumerable<ExercicioWhereInput>
    OR?: Enumerable<ExercicioWhereInput>
    NOT?: Enumerable<ExercicioWhereInput>
    id_exercicio?: IntFilter | number
    series?: IntFilter | number
    repeticoes?: IntFilter | number
    carga?: DecimalFilter | Decimal | DecimalJsLike | number | string
    nome?: StringFilter | string
    id_usuario?: IntFilter | number
    id_treino?: IntFilter | number
    usuarios?: XOR<UsuariosRelationFilter, UsuariosWhereInput>
    treinos?: XOR<TreinosRelationFilter, TreinosWhereInput>
  }

  export type ExercicioOrderByWithRelationInput = {
    id_exercicio?: SortOrder
    series?: SortOrder
    repeticoes?: SortOrder
    carga?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
    id_treino?: SortOrder
    usuarios?: UsuariosOrderByWithRelationInput
    treinos?: TreinosOrderByWithRelationInput
  }

  export type ExercicioWhereUniqueInput = {
    id_exercicio?: number
  }

  export type ExercicioOrderByWithAggregationInput = {
    id_exercicio?: SortOrder
    series?: SortOrder
    repeticoes?: SortOrder
    carga?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
    id_treino?: SortOrder
    _count?: ExercicioCountOrderByAggregateInput
    _avg?: ExercicioAvgOrderByAggregateInput
    _max?: ExercicioMaxOrderByAggregateInput
    _min?: ExercicioMinOrderByAggregateInput
    _sum?: ExercicioSumOrderByAggregateInput
  }

  export type ExercicioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExercicioScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExercicioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExercicioScalarWhereWithAggregatesInput>
    id_exercicio?: IntWithAggregatesFilter | number
    series?: IntWithAggregatesFilter | number
    repeticoes?: IntWithAggregatesFilter | number
    carga?: DecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    nome?: StringWithAggregatesFilter | string
    id_usuario?: IntWithAggregatesFilter | number
    id_treino?: IntWithAggregatesFilter | number
  }

  export type UsuariosCreateInput = {
    nome: string
    email: string
    idade: number
    altura: Decimal | DecimalJsLike | number | string
    peso: Decimal | DecimalJsLike | number | string
    senha: string
    treinos?: TreinosCreateNestedManyWithoutUsuariosInput
    exercicio?: ExercicioCreateNestedManyWithoutUsuariosInput
  }

  export type UsuariosUncheckedCreateInput = {
    id_usuario?: number
    nome: string
    email: string
    idade: number
    altura: Decimal | DecimalJsLike | number | string
    peso: Decimal | DecimalJsLike | number | string
    senha: string
    treinos?: TreinosUncheckedCreateNestedManyWithoutUsuariosInput
    exercicio?: ExercicioUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UsuariosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    senha?: StringFieldUpdateOperationsInput | string
    treinos?: TreinosUpdateManyWithoutUsuariosNestedInput
    exercicio?: ExercicioUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuariosUncheckedUpdateInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    senha?: StringFieldUpdateOperationsInput | string
    treinos?: TreinosUncheckedUpdateManyWithoutUsuariosNestedInput
    exercicio?: ExercicioUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuariosCreateManyInput = {
    id_usuario?: number
    nome: string
    email: string
    idade: number
    altura: Decimal | DecimalJsLike | number | string
    peso: Decimal | DecimalJsLike | number | string
    senha: string
  }

  export type UsuariosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuariosUncheckedUpdateManyInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type TreinosCreateInput = {
    nome: string
    usuarios: UsuariosCreateNestedOneWithoutTreinosInput
    exercicio?: ExercicioCreateNestedManyWithoutTreinosInput
  }

  export type TreinosUncheckedCreateInput = {
    id_treino?: number
    nome: string
    id_usuario: number
    exercicio?: ExercicioUncheckedCreateNestedManyWithoutTreinosInput
  }

  export type TreinosUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuariosUpdateOneRequiredWithoutTreinosNestedInput
    exercicio?: ExercicioUpdateManyWithoutTreinosNestedInput
  }

  export type TreinosUncheckedUpdateInput = {
    id_treino?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    id_usuario?: IntFieldUpdateOperationsInput | number
    exercicio?: ExercicioUncheckedUpdateManyWithoutTreinosNestedInput
  }

  export type TreinosCreateManyInput = {
    id_treino?: number
    nome: string
    id_usuario: number
  }

  export type TreinosUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type TreinosUncheckedUpdateManyInput = {
    id_treino?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type ExercicioCreateInput = {
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    usuarios: UsuariosCreateNestedOneWithoutExercicioInput
    treinos: TreinosCreateNestedOneWithoutExercicioInput
  }

  export type ExercicioUncheckedCreateInput = {
    id_exercicio?: number
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    id_usuario: number
    id_treino: number
  }

  export type ExercicioUpdateInput = {
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuariosUpdateOneRequiredWithoutExercicioNestedInput
    treinos?: TreinosUpdateOneRequiredWithoutExercicioNestedInput
  }

  export type ExercicioUncheckedUpdateInput = {
    id_exercicio?: IntFieldUpdateOperationsInput | number
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
    id_usuario?: IntFieldUpdateOperationsInput | number
    id_treino?: IntFieldUpdateOperationsInput | number
  }

  export type ExercicioCreateManyInput = {
    id_exercicio?: number
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    id_usuario: number
    id_treino: number
  }

  export type ExercicioUpdateManyMutationInput = {
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ExercicioUncheckedUpdateManyInput = {
    id_exercicio?: IntFieldUpdateOperationsInput | number
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
    id_usuario?: IntFieldUpdateOperationsInput | number
    id_treino?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type TreinosListRelationFilter = {
    every?: TreinosWhereInput
    some?: TreinosWhereInput
    none?: TreinosWhereInput
  }

  export type ExercicioListRelationFilter = {
    every?: ExercicioWhereInput
    some?: ExercicioWhereInput
    none?: ExercicioWhereInput
  }

  export type TreinosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExercicioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuariosCountOrderByAggregateInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
    senha?: SortOrder
  }

  export type UsuariosAvgOrderByAggregateInput = {
    id_usuario?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
  }

  export type UsuariosMaxOrderByAggregateInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
    senha?: SortOrder
  }

  export type UsuariosMinOrderByAggregateInput = {
    id_usuario?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
    senha?: SortOrder
  }

  export type UsuariosSumOrderByAggregateInput = {
    id_usuario?: SortOrder
    idade?: SortOrder
    altura?: SortOrder
    peso?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type UsuariosRelationFilter = {
    is?: UsuariosWhereInput
    isNot?: UsuariosWhereInput
  }

  export type TreinosCountOrderByAggregateInput = {
    id_treino?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
  }

  export type TreinosAvgOrderByAggregateInput = {
    id_treino?: SortOrder
    id_usuario?: SortOrder
  }

  export type TreinosMaxOrderByAggregateInput = {
    id_treino?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
  }

  export type TreinosMinOrderByAggregateInput = {
    id_treino?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
  }

  export type TreinosSumOrderByAggregateInput = {
    id_treino?: SortOrder
    id_usuario?: SortOrder
  }

  export type TreinosRelationFilter = {
    is?: TreinosWhereInput
    isNot?: TreinosWhereInput
  }

  export type ExercicioCountOrderByAggregateInput = {
    id_exercicio?: SortOrder
    series?: SortOrder
    repeticoes?: SortOrder
    carga?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
    id_treino?: SortOrder
  }

  export type ExercicioAvgOrderByAggregateInput = {
    id_exercicio?: SortOrder
    series?: SortOrder
    repeticoes?: SortOrder
    carga?: SortOrder
    id_usuario?: SortOrder
    id_treino?: SortOrder
  }

  export type ExercicioMaxOrderByAggregateInput = {
    id_exercicio?: SortOrder
    series?: SortOrder
    repeticoes?: SortOrder
    carga?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
    id_treino?: SortOrder
  }

  export type ExercicioMinOrderByAggregateInput = {
    id_exercicio?: SortOrder
    series?: SortOrder
    repeticoes?: SortOrder
    carga?: SortOrder
    nome?: SortOrder
    id_usuario?: SortOrder
    id_treino?: SortOrder
  }

  export type ExercicioSumOrderByAggregateInput = {
    id_exercicio?: SortOrder
    series?: SortOrder
    repeticoes?: SortOrder
    carga?: SortOrder
    id_usuario?: SortOrder
    id_treino?: SortOrder
  }

  export type TreinosCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<TreinosCreateWithoutUsuariosInput>, Enumerable<TreinosUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<TreinosCreateOrConnectWithoutUsuariosInput>
    createMany?: TreinosCreateManyUsuariosInputEnvelope
    connect?: Enumerable<TreinosWhereUniqueInput>
  }

  export type ExercicioCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<ExercicioCreateWithoutUsuariosInput>, Enumerable<ExercicioUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<ExercicioCreateOrConnectWithoutUsuariosInput>
    createMany?: ExercicioCreateManyUsuariosInputEnvelope
    connect?: Enumerable<ExercicioWhereUniqueInput>
  }

  export type TreinosUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<TreinosCreateWithoutUsuariosInput>, Enumerable<TreinosUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<TreinosCreateOrConnectWithoutUsuariosInput>
    createMany?: TreinosCreateManyUsuariosInputEnvelope
    connect?: Enumerable<TreinosWhereUniqueInput>
  }

  export type ExercicioUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<Enumerable<ExercicioCreateWithoutUsuariosInput>, Enumerable<ExercicioUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<ExercicioCreateOrConnectWithoutUsuariosInput>
    createMany?: ExercicioCreateManyUsuariosInputEnvelope
    connect?: Enumerable<ExercicioWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type TreinosUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<TreinosCreateWithoutUsuariosInput>, Enumerable<TreinosUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<TreinosCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<TreinosUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: TreinosCreateManyUsuariosInputEnvelope
    set?: Enumerable<TreinosWhereUniqueInput>
    disconnect?: Enumerable<TreinosWhereUniqueInput>
    delete?: Enumerable<TreinosWhereUniqueInput>
    connect?: Enumerable<TreinosWhereUniqueInput>
    update?: Enumerable<TreinosUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<TreinosUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<TreinosScalarWhereInput>
  }

  export type ExercicioUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<ExercicioCreateWithoutUsuariosInput>, Enumerable<ExercicioUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<ExercicioCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<ExercicioUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: ExercicioCreateManyUsuariosInputEnvelope
    set?: Enumerable<ExercicioWhereUniqueInput>
    disconnect?: Enumerable<ExercicioWhereUniqueInput>
    delete?: Enumerable<ExercicioWhereUniqueInput>
    connect?: Enumerable<ExercicioWhereUniqueInput>
    update?: Enumerable<ExercicioUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<ExercicioUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<ExercicioScalarWhereInput>
  }

  export type TreinosUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<TreinosCreateWithoutUsuariosInput>, Enumerable<TreinosUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<TreinosCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<TreinosUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: TreinosCreateManyUsuariosInputEnvelope
    set?: Enumerable<TreinosWhereUniqueInput>
    disconnect?: Enumerable<TreinosWhereUniqueInput>
    delete?: Enumerable<TreinosWhereUniqueInput>
    connect?: Enumerable<TreinosWhereUniqueInput>
    update?: Enumerable<TreinosUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<TreinosUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<TreinosScalarWhereInput>
  }

  export type ExercicioUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<Enumerable<ExercicioCreateWithoutUsuariosInput>, Enumerable<ExercicioUncheckedCreateWithoutUsuariosInput>>
    connectOrCreate?: Enumerable<ExercicioCreateOrConnectWithoutUsuariosInput>
    upsert?: Enumerable<ExercicioUpsertWithWhereUniqueWithoutUsuariosInput>
    createMany?: ExercicioCreateManyUsuariosInputEnvelope
    set?: Enumerable<ExercicioWhereUniqueInput>
    disconnect?: Enumerable<ExercicioWhereUniqueInput>
    delete?: Enumerable<ExercicioWhereUniqueInput>
    connect?: Enumerable<ExercicioWhereUniqueInput>
    update?: Enumerable<ExercicioUpdateWithWhereUniqueWithoutUsuariosInput>
    updateMany?: Enumerable<ExercicioUpdateManyWithWhereWithoutUsuariosInput>
    deleteMany?: Enumerable<ExercicioScalarWhereInput>
  }

  export type UsuariosCreateNestedOneWithoutTreinosInput = {
    create?: XOR<UsuariosCreateWithoutTreinosInput, UsuariosUncheckedCreateWithoutTreinosInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutTreinosInput
    connect?: UsuariosWhereUniqueInput
  }

  export type ExercicioCreateNestedManyWithoutTreinosInput = {
    create?: XOR<Enumerable<ExercicioCreateWithoutTreinosInput>, Enumerable<ExercicioUncheckedCreateWithoutTreinosInput>>
    connectOrCreate?: Enumerable<ExercicioCreateOrConnectWithoutTreinosInput>
    createMany?: ExercicioCreateManyTreinosInputEnvelope
    connect?: Enumerable<ExercicioWhereUniqueInput>
  }

  export type ExercicioUncheckedCreateNestedManyWithoutTreinosInput = {
    create?: XOR<Enumerable<ExercicioCreateWithoutTreinosInput>, Enumerable<ExercicioUncheckedCreateWithoutTreinosInput>>
    connectOrCreate?: Enumerable<ExercicioCreateOrConnectWithoutTreinosInput>
    createMany?: ExercicioCreateManyTreinosInputEnvelope
    connect?: Enumerable<ExercicioWhereUniqueInput>
  }

  export type UsuariosUpdateOneRequiredWithoutTreinosNestedInput = {
    create?: XOR<UsuariosCreateWithoutTreinosInput, UsuariosUncheckedCreateWithoutTreinosInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutTreinosInput
    upsert?: UsuariosUpsertWithoutTreinosInput
    connect?: UsuariosWhereUniqueInput
    update?: XOR<UsuariosUpdateWithoutTreinosInput, UsuariosUncheckedUpdateWithoutTreinosInput>
  }

  export type ExercicioUpdateManyWithoutTreinosNestedInput = {
    create?: XOR<Enumerable<ExercicioCreateWithoutTreinosInput>, Enumerable<ExercicioUncheckedCreateWithoutTreinosInput>>
    connectOrCreate?: Enumerable<ExercicioCreateOrConnectWithoutTreinosInput>
    upsert?: Enumerable<ExercicioUpsertWithWhereUniqueWithoutTreinosInput>
    createMany?: ExercicioCreateManyTreinosInputEnvelope
    set?: Enumerable<ExercicioWhereUniqueInput>
    disconnect?: Enumerable<ExercicioWhereUniqueInput>
    delete?: Enumerable<ExercicioWhereUniqueInput>
    connect?: Enumerable<ExercicioWhereUniqueInput>
    update?: Enumerable<ExercicioUpdateWithWhereUniqueWithoutTreinosInput>
    updateMany?: Enumerable<ExercicioUpdateManyWithWhereWithoutTreinosInput>
    deleteMany?: Enumerable<ExercicioScalarWhereInput>
  }

  export type ExercicioUncheckedUpdateManyWithoutTreinosNestedInput = {
    create?: XOR<Enumerable<ExercicioCreateWithoutTreinosInput>, Enumerable<ExercicioUncheckedCreateWithoutTreinosInput>>
    connectOrCreate?: Enumerable<ExercicioCreateOrConnectWithoutTreinosInput>
    upsert?: Enumerable<ExercicioUpsertWithWhereUniqueWithoutTreinosInput>
    createMany?: ExercicioCreateManyTreinosInputEnvelope
    set?: Enumerable<ExercicioWhereUniqueInput>
    disconnect?: Enumerable<ExercicioWhereUniqueInput>
    delete?: Enumerable<ExercicioWhereUniqueInput>
    connect?: Enumerable<ExercicioWhereUniqueInput>
    update?: Enumerable<ExercicioUpdateWithWhereUniqueWithoutTreinosInput>
    updateMany?: Enumerable<ExercicioUpdateManyWithWhereWithoutTreinosInput>
    deleteMany?: Enumerable<ExercicioScalarWhereInput>
  }

  export type UsuariosCreateNestedOneWithoutExercicioInput = {
    create?: XOR<UsuariosCreateWithoutExercicioInput, UsuariosUncheckedCreateWithoutExercicioInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutExercicioInput
    connect?: UsuariosWhereUniqueInput
  }

  export type TreinosCreateNestedOneWithoutExercicioInput = {
    create?: XOR<TreinosCreateWithoutExercicioInput, TreinosUncheckedCreateWithoutExercicioInput>
    connectOrCreate?: TreinosCreateOrConnectWithoutExercicioInput
    connect?: TreinosWhereUniqueInput
  }

  export type UsuariosUpdateOneRequiredWithoutExercicioNestedInput = {
    create?: XOR<UsuariosCreateWithoutExercicioInput, UsuariosUncheckedCreateWithoutExercicioInput>
    connectOrCreate?: UsuariosCreateOrConnectWithoutExercicioInput
    upsert?: UsuariosUpsertWithoutExercicioInput
    connect?: UsuariosWhereUniqueInput
    update?: XOR<UsuariosUpdateWithoutExercicioInput, UsuariosUncheckedUpdateWithoutExercicioInput>
  }

  export type TreinosUpdateOneRequiredWithoutExercicioNestedInput = {
    create?: XOR<TreinosCreateWithoutExercicioInput, TreinosUncheckedCreateWithoutExercicioInput>
    connectOrCreate?: TreinosCreateOrConnectWithoutExercicioInput
    upsert?: TreinosUpsertWithoutExercicioInput
    connect?: TreinosWhereUniqueInput
    update?: XOR<TreinosUpdateWithoutExercicioInput, TreinosUncheckedUpdateWithoutExercicioInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDecimalFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalFilter | Decimal | DecimalJsLike | number | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDecimalWithAggregatesFilter = {
    equals?: Decimal | DecimalJsLike | number | string
    in?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    notIn?: Enumerable<Decimal> | Enumerable<DecimalJsLike> | Enumerable<number> | Enumerable<string> | Decimal | DecimalJsLike | number | string
    lt?: Decimal | DecimalJsLike | number | string
    lte?: Decimal | DecimalJsLike | number | string
    gt?: Decimal | DecimalJsLike | number | string
    gte?: Decimal | DecimalJsLike | number | string
    not?: NestedDecimalWithAggregatesFilter | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter
    _avg?: NestedDecimalFilter
    _sum?: NestedDecimalFilter
    _min?: NestedDecimalFilter
    _max?: NestedDecimalFilter
  }

  export type TreinosCreateWithoutUsuariosInput = {
    nome: string
    exercicio?: ExercicioCreateNestedManyWithoutTreinosInput
  }

  export type TreinosUncheckedCreateWithoutUsuariosInput = {
    id_treino?: number
    nome: string
    exercicio?: ExercicioUncheckedCreateNestedManyWithoutTreinosInput
  }

  export type TreinosCreateOrConnectWithoutUsuariosInput = {
    where: TreinosWhereUniqueInput
    create: XOR<TreinosCreateWithoutUsuariosInput, TreinosUncheckedCreateWithoutUsuariosInput>
  }

  export type TreinosCreateManyUsuariosInputEnvelope = {
    data: Enumerable<TreinosCreateManyUsuariosInput>
    skipDuplicates?: boolean
  }

  export type ExercicioCreateWithoutUsuariosInput = {
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    treinos: TreinosCreateNestedOneWithoutExercicioInput
  }

  export type ExercicioUncheckedCreateWithoutUsuariosInput = {
    id_exercicio?: number
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    id_treino: number
  }

  export type ExercicioCreateOrConnectWithoutUsuariosInput = {
    where: ExercicioWhereUniqueInput
    create: XOR<ExercicioCreateWithoutUsuariosInput, ExercicioUncheckedCreateWithoutUsuariosInput>
  }

  export type ExercicioCreateManyUsuariosInputEnvelope = {
    data: Enumerable<ExercicioCreateManyUsuariosInput>
    skipDuplicates?: boolean
  }

  export type TreinosUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: TreinosWhereUniqueInput
    update: XOR<TreinosUpdateWithoutUsuariosInput, TreinosUncheckedUpdateWithoutUsuariosInput>
    create: XOR<TreinosCreateWithoutUsuariosInput, TreinosUncheckedCreateWithoutUsuariosInput>
  }

  export type TreinosUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: TreinosWhereUniqueInput
    data: XOR<TreinosUpdateWithoutUsuariosInput, TreinosUncheckedUpdateWithoutUsuariosInput>
  }

  export type TreinosUpdateManyWithWhereWithoutUsuariosInput = {
    where: TreinosScalarWhereInput
    data: XOR<TreinosUpdateManyMutationInput, TreinosUncheckedUpdateManyWithoutTreinosInput>
  }

  export type TreinosScalarWhereInput = {
    AND?: Enumerable<TreinosScalarWhereInput>
    OR?: Enumerable<TreinosScalarWhereInput>
    NOT?: Enumerable<TreinosScalarWhereInput>
    id_treino?: IntFilter | number
    nome?: StringFilter | string
    id_usuario?: IntFilter | number
  }

  export type ExercicioUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: ExercicioWhereUniqueInput
    update: XOR<ExercicioUpdateWithoutUsuariosInput, ExercicioUncheckedUpdateWithoutUsuariosInput>
    create: XOR<ExercicioCreateWithoutUsuariosInput, ExercicioUncheckedCreateWithoutUsuariosInput>
  }

  export type ExercicioUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: ExercicioWhereUniqueInput
    data: XOR<ExercicioUpdateWithoutUsuariosInput, ExercicioUncheckedUpdateWithoutUsuariosInput>
  }

  export type ExercicioUpdateManyWithWhereWithoutUsuariosInput = {
    where: ExercicioScalarWhereInput
    data: XOR<ExercicioUpdateManyMutationInput, ExercicioUncheckedUpdateManyWithoutExercicioInput>
  }

  export type ExercicioScalarWhereInput = {
    AND?: Enumerable<ExercicioScalarWhereInput>
    OR?: Enumerable<ExercicioScalarWhereInput>
    NOT?: Enumerable<ExercicioScalarWhereInput>
    id_exercicio?: IntFilter | number
    series?: IntFilter | number
    repeticoes?: IntFilter | number
    carga?: DecimalFilter | Decimal | DecimalJsLike | number | string
    nome?: StringFilter | string
    id_usuario?: IntFilter | number
    id_treino?: IntFilter | number
  }

  export type UsuariosCreateWithoutTreinosInput = {
    nome: string
    email: string
    idade: number
    altura: Decimal | DecimalJsLike | number | string
    peso: Decimal | DecimalJsLike | number | string
    senha: string
    exercicio?: ExercicioCreateNestedManyWithoutUsuariosInput
  }

  export type UsuariosUncheckedCreateWithoutTreinosInput = {
    id_usuario?: number
    nome: string
    email: string
    idade: number
    altura: Decimal | DecimalJsLike | number | string
    peso: Decimal | DecimalJsLike | number | string
    senha: string
    exercicio?: ExercicioUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UsuariosCreateOrConnectWithoutTreinosInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutTreinosInput, UsuariosUncheckedCreateWithoutTreinosInput>
  }

  export type ExercicioCreateWithoutTreinosInput = {
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    usuarios: UsuariosCreateNestedOneWithoutExercicioInput
  }

  export type ExercicioUncheckedCreateWithoutTreinosInput = {
    id_exercicio?: number
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    id_usuario: number
  }

  export type ExercicioCreateOrConnectWithoutTreinosInput = {
    where: ExercicioWhereUniqueInput
    create: XOR<ExercicioCreateWithoutTreinosInput, ExercicioUncheckedCreateWithoutTreinosInput>
  }

  export type ExercicioCreateManyTreinosInputEnvelope = {
    data: Enumerable<ExercicioCreateManyTreinosInput>
    skipDuplicates?: boolean
  }

  export type UsuariosUpsertWithoutTreinosInput = {
    update: XOR<UsuariosUpdateWithoutTreinosInput, UsuariosUncheckedUpdateWithoutTreinosInput>
    create: XOR<UsuariosCreateWithoutTreinosInput, UsuariosUncheckedCreateWithoutTreinosInput>
  }

  export type UsuariosUpdateWithoutTreinosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    senha?: StringFieldUpdateOperationsInput | string
    exercicio?: ExercicioUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuariosUncheckedUpdateWithoutTreinosInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    senha?: StringFieldUpdateOperationsInput | string
    exercicio?: ExercicioUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type ExercicioUpsertWithWhereUniqueWithoutTreinosInput = {
    where: ExercicioWhereUniqueInput
    update: XOR<ExercicioUpdateWithoutTreinosInput, ExercicioUncheckedUpdateWithoutTreinosInput>
    create: XOR<ExercicioCreateWithoutTreinosInput, ExercicioUncheckedCreateWithoutTreinosInput>
  }

  export type ExercicioUpdateWithWhereUniqueWithoutTreinosInput = {
    where: ExercicioWhereUniqueInput
    data: XOR<ExercicioUpdateWithoutTreinosInput, ExercicioUncheckedUpdateWithoutTreinosInput>
  }

  export type ExercicioUpdateManyWithWhereWithoutTreinosInput = {
    where: ExercicioScalarWhereInput
    data: XOR<ExercicioUpdateManyMutationInput, ExercicioUncheckedUpdateManyWithoutExercicioInput>
  }

  export type UsuariosCreateWithoutExercicioInput = {
    nome: string
    email: string
    idade: number
    altura: Decimal | DecimalJsLike | number | string
    peso: Decimal | DecimalJsLike | number | string
    senha: string
    treinos?: TreinosCreateNestedManyWithoutUsuariosInput
  }

  export type UsuariosUncheckedCreateWithoutExercicioInput = {
    id_usuario?: number
    nome: string
    email: string
    idade: number
    altura: Decimal | DecimalJsLike | number | string
    peso: Decimal | DecimalJsLike | number | string
    senha: string
    treinos?: TreinosUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UsuariosCreateOrConnectWithoutExercicioInput = {
    where: UsuariosWhereUniqueInput
    create: XOR<UsuariosCreateWithoutExercicioInput, UsuariosUncheckedCreateWithoutExercicioInput>
  }

  export type TreinosCreateWithoutExercicioInput = {
    nome: string
    usuarios: UsuariosCreateNestedOneWithoutTreinosInput
  }

  export type TreinosUncheckedCreateWithoutExercicioInput = {
    id_treino?: number
    nome: string
    id_usuario: number
  }

  export type TreinosCreateOrConnectWithoutExercicioInput = {
    where: TreinosWhereUniqueInput
    create: XOR<TreinosCreateWithoutExercicioInput, TreinosUncheckedCreateWithoutExercicioInput>
  }

  export type UsuariosUpsertWithoutExercicioInput = {
    update: XOR<UsuariosUpdateWithoutExercicioInput, UsuariosUncheckedUpdateWithoutExercicioInput>
    create: XOR<UsuariosCreateWithoutExercicioInput, UsuariosUncheckedCreateWithoutExercicioInput>
  }

  export type UsuariosUpdateWithoutExercicioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    senha?: StringFieldUpdateOperationsInput | string
    treinos?: TreinosUpdateManyWithoutUsuariosNestedInput
  }

  export type UsuariosUncheckedUpdateWithoutExercicioInput = {
    id_usuario?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    idade?: IntFieldUpdateOperationsInput | number
    altura?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    peso?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    senha?: StringFieldUpdateOperationsInput | string
    treinos?: TreinosUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type TreinosUpsertWithoutExercicioInput = {
    update: XOR<TreinosUpdateWithoutExercicioInput, TreinosUncheckedUpdateWithoutExercicioInput>
    create: XOR<TreinosCreateWithoutExercicioInput, TreinosUncheckedCreateWithoutExercicioInput>
  }

  export type TreinosUpdateWithoutExercicioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuariosUpdateOneRequiredWithoutTreinosNestedInput
  }

  export type TreinosUncheckedUpdateWithoutExercicioInput = {
    id_treino?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    id_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type TreinosCreateManyUsuariosInput = {
    id_treino?: number
    nome: string
  }

  export type ExercicioCreateManyUsuariosInput = {
    id_exercicio?: number
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    id_treino: number
  }

  export type TreinosUpdateWithoutUsuariosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    exercicio?: ExercicioUpdateManyWithoutTreinosNestedInput
  }

  export type TreinosUncheckedUpdateWithoutUsuariosInput = {
    id_treino?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    exercicio?: ExercicioUncheckedUpdateManyWithoutTreinosNestedInput
  }

  export type TreinosUncheckedUpdateManyWithoutTreinosInput = {
    id_treino?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ExercicioUpdateWithoutUsuariosInput = {
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
    treinos?: TreinosUpdateOneRequiredWithoutExercicioNestedInput
  }

  export type ExercicioUncheckedUpdateWithoutUsuariosInput = {
    id_exercicio?: IntFieldUpdateOperationsInput | number
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
    id_treino?: IntFieldUpdateOperationsInput | number
  }

  export type ExercicioUncheckedUpdateManyWithoutExercicioInput = {
    id_exercicio?: IntFieldUpdateOperationsInput | number
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
    id_treino?: IntFieldUpdateOperationsInput | number
  }

  export type ExercicioCreateManyTreinosInput = {
    id_exercicio?: number
    series: number
    repeticoes: number
    carga: Decimal | DecimalJsLike | number | string
    nome: string
    id_usuario: number
  }

  export type ExercicioUpdateWithoutTreinosInput = {
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
    usuarios?: UsuariosUpdateOneRequiredWithoutExercicioNestedInput
  }

  export type ExercicioUncheckedUpdateWithoutTreinosInput = {
    id_exercicio?: IntFieldUpdateOperationsInput | number
    series?: IntFieldUpdateOperationsInput | number
    repeticoes?: IntFieldUpdateOperationsInput | number
    carga?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    nome?: StringFieldUpdateOperationsInput | string
    id_usuario?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}